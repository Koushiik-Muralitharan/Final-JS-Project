{"version":3,"file":"signup.bundle.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,WAAW;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,WAAW;AACjF;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA","sources":["webpack:///./signup.ts"],"sourcesContent":["\"use strict\";\n// Ensure localStorage is initialized with an empty array if not present\nif (!localStorage.getItem(\"UserArray\")) {\n    localStorage.setItem(\"UserArray\", \"[]\");\n}\n// Parse the UserArray from localStorage\nlet UserArray = JSON.parse(localStorage.getItem(\"UserArray\") || \"[]\");\nclass User {\n    // status: string = \"out\";\n    constructor(name, email, password) {\n        this.name = name;\n        this.email = email;\n        this.password = password;\n        this.loggedStatus = \"out\";\n    }\n    checkIfUserExists() {\n        return UserArray.some(user => user.email === this.email);\n    }\n    addUser() {\n        let result = this.checkIfUserExists();\n        if (result) {\n            const confirmPasswordError = document.getElementById('confirm-password-error');\n            confirmPasswordError.innerText = \"User with this email already exists.\";\n            return;\n        }\n        UserArray.push(this);\n        localStorage.setItem(\"UserArray\", JSON.stringify(UserArray));\n        window.location.href = \"index.html\";\n    }\n}\n// Retrieve elements by ID and type cast them\nconst userName = document.getElementById('name');\nconst userEmail = document.getElementById('email');\nconst userPasscode = document.getElementById('password');\nconst userConfirmPasscode = document.getElementById('confirm-password');\nconst UserSubmitbutton = document.getElementById('submit-button');\nconst confirmPasswordError = document.getElementById('confirm-password-error');\nconst PasswordError = document.getElementById('password-error');\nconst emailError = document.getElementById('email-error');\nconst nameError = document.getElementById('name-error');\nlet isValid = true;\nuserName.onblur = function () {\n    if (userName.value === \"\") {\n        nameError.innerText = 'The name field is empty.*';\n        isValid = false;\n    }\n    else if (!isNaN(Number(userName.value))) {\n        nameError.innerText = 'Please enter a valid name.*';\n        isValid = false;\n    }\n    else {\n        nameError.innerText = '';\n        isValid = true;\n    }\n};\nuserEmail.onblur = function () {\n    if (userEmail.value === \"\") {\n        emailError.innerText = 'The email field is empty.*';\n        isValid = false;\n    }\n    else {\n        emailError.innerText = '';\n        isValid = true;\n    }\n};\nuserPasscode.onblur = function () {\n    if (userPasscode.value === \"\") {\n        PasswordError.innerText = 'The password field is empty.*';\n        isValid = false;\n    }\n    else {\n        PasswordError.innerText = '';\n        isValid = true;\n    }\n};\nuserConfirmPasscode.onblur = function () {\n    if (userConfirmPasscode.value === \"\") {\n        confirmPasswordError.innerText = 'The confirm password field is empty.*';\n        isValid = false;\n    }\n    else {\n        confirmPasswordError.innerText = '';\n        isValid = true;\n    }\n};\nUserSubmitbutton.onclick = function (event) {\n    event.preventDefault();\n    if (isValid) {\n        let usersName = userName.value;\n        let usersEmail = userEmail.value;\n        let usersPasscode = userPasscode.value;\n        let usersConfirmPasscode = userConfirmPasscode.value;\n        const minLength = 6;\n        const hasUpperCase = /[A-Z]/.test(usersPasscode);\n        const hasLowerCase = /[a-z]/.test(usersPasscode);\n        if (usersPasscode.length < minLength) {\n            PasswordError.innerText = `Password must be at least ${minLength} characters long.*`;\n            return;\n        }\n        else if (!hasUpperCase) {\n            PasswordError.innerText = 'Password must contain one uppercase letter.*';\n            return;\n        }\n        else if (!hasLowerCase) {\n            PasswordError.innerText = 'Password must contain one lowercase letter.*';\n            return;\n        }\n        else if (usersPasscode === usersConfirmPasscode) {\n            let newUser = new User(usersName, usersEmail, usersPasscode);\n            newUser.addUser();\n        }\n        else {\n            confirmPasswordError.innerText = 'The confirm passcode must match the passcode.*';\n            return;\n        }\n    }\n    else {\n        confirmPasswordError.innerText = \"Ensure the fields are valid before submit.*\";\n    }\n};\n// import { UserRepository } from \"./services/services\";\n// import { User } from \"./models/models\";\n// const userRepo = new UserRepository();\n// // Parse the UserArray from localStorage\n// let UserArray: User[] = userRepo.UsersLocalStorage();\n// // class Users {\n// //     name: string;\n// //     email: string;\n// //     password: string;\n// //     loggedStatus: string;\n// //     // status: string = \"out\";\n// //     constructor(name: string, email: string, password: string) {\n// //         this.name = name;\n// //         this.email = email;\n// //         this.password = password;\n// //         this.loggedStatus = \"out\";\n// //     }\n// //     checkIfUserExists(): boolean {\n// //         return UserArray.some(user => user.email === this.email);\n// //     }\n// //     addUser(): void {\n// //         let result = this.checkIfUserExists();\n// //         if (result) {\n// //             const confirmPasswordError = document.getElementById('confirm-password-error') as HTMLElement;\n// //             confirmPasswordError.innerText = \"User with this email already exists.\";\n// //             return;\n// //         }\n// //         //UserArray.push(this);\n// //         localStorage.setItem(\"UserArray\", JSON.stringify(UserArray));\n// //         window.location.href = \"SignIn.htm\";\n// //     }\n// // }\n// // Retrieve elements by ID and type cast them\n// const userName = document.getElementById('name') as HTMLInputElement;\n// const userEmail = document.getElementById('email') as HTMLInputElement;\n// const userPasscode = document.getElementById('password') as HTMLInputElement;\n// const userConfirmPasscode = document.getElementById('confirm-password') as HTMLInputElement;\n// const UserSubmitbutton = document.getElementById('submit-button') as HTMLButtonElement;\n// const confirmPasswordError = document.getElementById('confirm-password-error') as HTMLElement;\n// const PasswordError = document.getElementById('password-error') as HTMLElement;\n// const emailError = document.getElementById('email-error') as HTMLElement;\n// const nameError = document.getElementById('name-error') as HTMLElement;\n// let isValid = true;\n// userName.onblur = function() {\n//     if (userName.value === \"\") {\n//         nameError.innerText = 'The name field is empty.*';\n//         isValid = false;\n//     } else if (!isNaN(Number(userName.value))) {\n//         nameError.innerText = 'Please enter a valid name.*';\n//         isValid = false;\n//     } else {\n//         nameError.innerText = '';\n//         isValid = true;\n//     }\n// }\n// userEmail.onblur = function() {\n//     if (userEmail.value === \"\") {\n//         emailError.innerText = 'The email field is empty.*';\n//         isValid = false;\n//     } else {\n//         emailError.innerText = '';\n//         isValid = true;\n//     }\n// }\n// userPasscode.onblur = function() {\n//     if (userPasscode.value === \"\") {\n//         PasswordError.innerText = 'The password field is empty.*';\n//         isValid = false;\n//     }else {\n//         PasswordError.innerText = '';\n//         isValid = true;\n//     }\n// }\n// userConfirmPasscode.onblur = function() {\n//     if (userConfirmPasscode.value === \"\") {\n//         confirmPasswordError.innerText = 'The confirm password field is empty.*';\n//         isValid = false;\n//     } else {\n//         confirmPasswordError.innerText = '';\n//         isValid = true;\n//     }\n// }\n// UserSubmitbutton.onclick = function(event: Event) {\n//     event.preventDefault();\n//     if (isValid) {\n//         let usersName = userName.value;\n//         let usersEmail = userEmail.value;\n//         let usersPasscode = userPasscode.value;\n//         let usersConfirmPasscode = userConfirmPasscode.value;\n//         const minLength = 6;\n//         const hasUpperCase = /[A-Z]/.test(usersPasscode);\n//         const hasLowerCase = /[a-z]/.test(usersPasscode);\n//         if (usersPasscode.length < minLength) {\n//             PasswordError.innerText = `Password must be at least ${minLength} characters long.*`;\n//             return;\n//         } else if (!hasUpperCase) {\n//             PasswordError.innerText = 'Password must contain one uppercase letter.*';\n//             return;\n//         } else if (!hasLowerCase) {\n//             PasswordError.innerText = 'Password must contain one lowercase letter.*';\n//             return;\n//         } else if (usersPasscode === usersConfirmPasscode) {\n//             // let newUser = new User(usersName, usersEmail, usersPasscode);\n//             // newUser.addUser();\n//             const newUser: User = {\n//                 name: usersName,\n//                 email: usersEmail,\n//                 password: usersPasscode,\n//                 loggedStatus: \"out\",\n//                 role: \"user\",\n//               };\n//               userRepo.addGoals(newUser);\n//         } else {\n//             confirmPasswordError.innerText = 'The confirm passcode must match the passcode.*';\n//             return;\n//         }\n//     } else {\n//         confirmPasswordError.innerText = \"Ensure the fields are valid before submit.*\";\n//     }\n// }\n"],"names":[],"sourceRoot":""}